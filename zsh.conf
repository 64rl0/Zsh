# zsh.conf
# vim: ft=sh

#   __|    \    _ \  |      _ \   __| __ __| __ __|
#  (      _ \     /  |     (   | (_ |    |      |
# \___| _/  _\ _|_\ ____| \___/ \___|   _|     _|


#----------------------------------------
# Set Up Homebrew (before adjusting path)
#----------------------------------------
if [[ -f "/opt/homebrew/bin/brew" ]]; then
    if [[ -z "${HOMEBREW_PREFIX}" ]]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
fi


#---------
# Set PATH
#---------
paths=(
    # Homebrew PATHS
    "/opt/homebrew/bin"
    "/opt/homebrew/sbin"

    # System PATHS
    "${HOME}/.local/bin"
    "${HOME}/.local/sbin"

    "${HOME}/bin"
    "${HOME}/sbin"

    "/usr/local/amazon/bin"
    "/usr/local/amazon/sbin"

    "/usr/local/bin"
    "/usr/local/sbin"

    "/usr/bin"
    "/usr/sbin"

    "/bin"
    "/sbin"

    # Apollo PATHS
    "/apollo/bin"
    "/apollo/sbin"

    "/apollo/env/envImprovement/bin"
    "/apollo/env/envImprovement/sbin"

    "/apollo/env/AmazonAwsCli/bin"
    "/apollo/env/AmazonAwsCli/sbin"

    "/apollo/env/ADCDNSOpsTools/bin"
    "/apollo/env/ADCDNSOpsTools/sbin"
)

# Initialize new_path
unset new_path

for path_to_add in "${paths[@]}"; do
    if [[ -d "${path_to_add}" ]]; then
        new_path="${new_path:+${new_path}:}${path_to_add}"
    fi
done

# Export new_path as PATH
export PATH="${new_path}"
unset paths new_path


#----------
# Set FPATH
#----------
# To enable Homebrew’s completions, you must inject the Homebrew site-functions path into the FPATH before initializing zsh’s completion
if [[ -n "${HOMEBREW_PREFIX}" ]]; then
    if [[ ! "${FPATH}" == *"${HOMEBREW_PREFIX}/share/zsh/site-functions"* ]]; then
        export FPATH="${HOMEBREW_PREFIX}/share/zsh/site-functions${FPATH:+:${FPATH}}"
    fi
fi

# Custom site-functions path
if [[ ! "${FPATH}" == *"${HOME}/.zsh/completion/site-functions"* ]]; then
    export FPATH="${FPATH:+${FPATH}:}${HOME}/.zsh/completion/site-functions"
fi

# Icarus site-functions path
if [[ -f "${HOME}/.icarus/site-functions/_icarus" ]]; then
    if [[ ! "${FPATH}" == *"${HOME}/.icarus/site-functions"* ]]; then
        export FPATH="${FPATH:+${FPATH}:}${HOME}/.icarus/site-functions"
    fi
fi


#------------
# ZSH Options
#------------
# Initialize the zsh completion system
autoload bashcompinit && bashcompinit
autoload -Uz compinit && compinit

# Include dotfiles in completion system suggestions
_comp_options+=(globdots)

# Correction feedback format
zstyle ':completion:*:*:*:*:corrections' format '%F{yellow}!- %d (errors: %e) -!%f'

# Descriptions feedback format
zstyle ':completion:*:*:*:*:descriptions' format '%F{blue}-- %D %d --%f'

# Messages feedback format
zstyle ':completion:*:*:*:*:messages' format ' %F{purple} -- %d --%f'

# Warnings feedback format
zstyle ':completion:*:*:*:*:warnings' format ' %F{red}-- no matches found --%f'

# Colors for files and directory
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# Ensure any prefix typed is kept and not discarded during the completion
zstyle ':completion:*' keep-prefix true

# Enable command-line flags and arguments completion for all contexts
zstyle ':completion:*' complete-options true

# Case-insensitive (uppercase from lowercase) completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# Case-insensitive (all) completion
#zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# Case-insensitive,partial-word and then substring completion
#zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'


# --------------------
# ZSH History Settings
# --------------------
# Refers to the path/location of the history file
HISTFILE="${HOME}/.zsh_history"

# Refers to the size of the history file
HISTFILESIZE=1000000000000

# Refers to the number of commands that are loaded into memory from the history file
HISTSIZE=1000000000

# Refers to the number of commands that are stored in the history file
SAVEHIST=1000000000

# Records the timestamp of each command in HISTFILE
setopt EXTENDED_HISTORY

# Ensures that commands are added to the history immediately
setopt INC_APPEND_HISTORY

# Remove command lines from the history list when the first character on the line is a space
setopt HIST_IGNORE_SPACE


#---------------------------------
# XDG Base Directory Specification
#---------------------------------
# User-specific configuration files
export XDG_CONFIG_HOME="${HOME}/.config"

# User-specific data files
export XDG_DATA_HOME="${HOME}/.local/share"

# User-specific non-essential data files
export XDG_CACHE_HOME="${HOME}/.cache"

# User-specific state files
export XDG_STATE_HOME="${HOME}/.local/state"


# ----------------
# Terminal Options
# ----------------
export COLORTERM='truecolor'


# --------------
# Default Editor
# --------------
# Set the default editor for all apps that check this
export VISUAL='vim'
export EDITOR='vim'
export SYSTEMD_EDITOR='vim'


# -----------------
# Default man pager
# -----------------
# Specify which output pager to use with man
export MANPAGER="/bin/sh -c \"col -b | vim -c 'set ft=man ts=8 nomod nolist nonu noma' -\""


# -------------
# Colors for LS
# -------------
export CLICOLOR=1
export LSCOLORS='exgxfxdxcxdadaxbadhcec'
export LS_COLORS='rs=0:di=38;5;27:ln=38;5;51:mh=44;38;5;15:pi=40;38;5;11:so=38;5;13:do=38;5;5:bd=48;5;232;38;5;11:cd=48;5;232;38;5;3:or=48;5;232;38;5;9:mi=05;48;5;232;38;5;15:su=48;5;196;38;5;15:sg=48;5;11;38;5;16:ca=48;5;196;38;5;226:tw=48;5;10;38;5;16:ow=48;5;10;38;5;21:st=48;5;21;38;5;15:ex=38;5;34:*.tar=38;5;9:*.tgz=38;5;9:*.arc=38;5;9:*.arj=38;5;9:*.taz=38;5;9:*.lha=38;5;9:*.lz4=38;5;9:*.lzh=38;5;9:*.lzma=38;5;9:*.tlz=38;5;9:*.txz=38;5;9:*.tzo=38;5;9:*.t7z=38;5;9:*.zip=38;5;9:*.z=38;5;9:*.Z=38;5;9:*.dz=38;5;9:*.gz=38;5;9:*.lrz=38;5;9:*.lz=38;5;9:*.lzo=38;5;9:*.xz=38;5;9:*.bz2=38;5;9:*.bz=38;5;9:*.tbz=38;5;9:*.tbz2=38;5;9:*.tz=38;5;9:*.deb=38;5;9:*.rpm=38;5;9:*.jar=38;5;9:*.war=38;5;9:*.ear=38;5;9:*.sar=38;5;9:*.rar=38;5;9:*.alz=38;5;9:*.ace=38;5;9:*.zoo=38;5;9:*.cpio=38;5;9:*.7z=38;5;9:*.rz=38;5;9:*.cab=38;5;9:*.jpg=38;5;13:*.jpeg=38;5;13:*.gif=38;5;13:*.bmp=38;5;13:*.pbm=38;5;13:*.pgm=38;5;13:*.ppm=38;5;13:*.tga=38;5;13:*.xbm=38;5;13:*.xpm=38;5;13:*.tif=38;5;13:*.tiff=38;5;13:*.png=38;5;13:*.svg=38;5;13:*.svgz=38;5;13:*.mng=38;5;13:*.pcx=38;5;13:*.mov=38;5;13:*.mpg=38;5;13:*.mpeg=38;5;13:*.m2v=38;5;13:*.mkv=38;5;13:*.webm=38;5;13:*.ogm=38;5;13:*.mp4=38;5;13:*.m4v=38;5;13:*.mp4v=38;5;13:*.vob=38;5;13:*.qt=38;5;13:*.nuv=38;5;13:*.wmv=38;5;13:*.asf=38;5;13:*.rm=38;5;13:*.rmvb=38;5;13:*.flc=38;5;13:*.avi=38;5;13:*.fli=38;5;13:*.flv=38;5;13:*.gl=38;5;13:*.dl=38;5;13:*.xcf=38;5;13:*.xwd=38;5;13:*.yuv=38;5;13:*.cgm=38;5;13:*.emf=38;5;13:*.axv=38;5;13:*.anx=38;5;13:*.ogv=38;5;13:*.ogx=38;5;13:*.aac=38;5;45:*.au=38;5;45:*.flac=38;5;45:*.mid=38;5;45:*.midi=38;5;45:*.mka=38;5;45:*.mp3=38;5;45:*.mpc=38;5;45:*.ogg=38;5;45:*.ra=38;5;45:*.wav=38;5;45:*.axa=38;5;45:*.oga=38;5;45:*.spx=38;5;45:*.xspf=38;5;45:'


# ---------------------
# Load carlogtt aliases
# ---------------------
if [[ -f "${HOME}/.carlogtt_alias/base_alias" ]]; then
    . "${HOME}/.carlogtt_alias/base_alias"
fi

if [[ -f "${HOME}/.carlogtt_alias/$(hostname)_alias" ]]; then
    . "${HOME}/.carlogtt_alias/$(hostname)_alias"
fi


# ---------------------
# Load carlogtt scripts
# ---------------------
if [[ -f "${HOME}/.carlogtt_script/scripts" ]]; then
    . "${HOME}/.carlogtt_script/scripts"
fi


# -----------
# ZSH Plugins
# -----------
# zsh-autosuggestions
if [[ -f "${HOMEBREW_PREFIX}/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
    . "${HOMEBREW_PREFIX}/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
elif [[ -f "${HOME}/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
    . "${HOME}/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh"
fi

# zsh-syntax-highlighting
if [[ -f "${HOMEBREW_PREFIX}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
    export ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR="${HOMEBREW_PREFIX}/share/zsh-syntax-highlighting/highlighters"
    . "${HOMEBREW_PREFIX}/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
elif [[ -f "${HOME}/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
    . "${HOME}/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi


# ---------
# ZSH Tools
# ---------
# Icarus
if [[ -f "${HOME}/.icarus/bin/icarus" ]]; then
    prepend_path "${HOME}/.icarus/bin"
fi

# Starship
if starship_path=$(command -v \starship); then
    export STARSHIP_CONFIG="${XDG_CONFIG_HOME}/starship/starship.toml"
    eval "$(${starship_path} init zsh)"
fi

# FZF
if fzf_path=$(command -v \fzf); then
    . <("${fzf_path}" --zsh)
elif [[ -f "${HOME}/.fzf/bin/fzf" ]]; then
    fzf_path="${HOME}/.fzf/bin/fzf"
    prepend_path "${HOME}/.fzf/bin"
    . <("${fzf_path}" --zsh)
fi
# Load FZF configuration
if [[ -n "${fzf_path}" && -f "${XDG_CONFIG_HOME}/fzf/fzf.conf" ]]; then
    . "${XDG_CONFIG_HOME}/fzf/fzf.conf"
fi

# YAZI
if yazi_path=$(command -v \yazi); then
    export YAZI_CONFIG_HOME="${XDG_CONFIG_HOME}/yazi"
fi

# NVM - Node Version Manager
if [[ -d "${HOME}/.nvm" ]]; then
    export NVM_DIR="${HOME}/.nvm"
    if [[ -s "${NVM_DIR}/nvm.sh" ]]; then
        . "${NVM_DIR}/nvm.sh"
    fi
fi

# Load tmux if in an interactive remote host
if [[ "$-" =~ i && -n "${SSH_TTY}" && -z "${TMUX}" ]]; then
    tmux attach-session -t SSH_TTY || tmux new-session -s SSH_TTY
fi


# --------------
# ZSH Completion
# --------------
# CUSTOM SITE-FUNCTIONS PATH ADDED TO `FPATH` AT THE TOP OF THIS FILE
# NO NEED TO SOURCE THIS ANYMORE
# ZSH completion folder
# if [[ -f "${HOME}/.zsh/completion/zsh_completion.sh" ]]; then
#     . "${HOME}/.zsh/completion/zsh_completion.sh"
# fi

# NVM completion
if [[ -s "${NVM_DIR}/bash_completion" ]]; then
    . "${NVM_DIR}/bash_completion"
fi

# AWS cli completions
if aws_completer_path=$(command -v \aws_completer); then
    complete -C "${aws_completer_path}" aws
fi

# Brazil completion
if [[ -f "${HOME}/.brazil_completion/zsh_completion" ]]; then
    # Needs to have toolbox in the path to be able to source completion
    prepend_path "${HOME}/.toolbox/bin"
    . "${HOME}/.brazil_completion/zsh_completion"
fi

